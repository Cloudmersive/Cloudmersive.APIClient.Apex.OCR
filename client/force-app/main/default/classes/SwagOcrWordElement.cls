/*
 * ocrapi
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * A single word in an OCR document
 */
public class SwagOcrWordElement implements Swagger.MappedProperties {
    /**
     * Text of the word
     * @return wordText
     */
    public String wordText { get; set; }

    /**
     * Line number of the word
     * @return lineNumber
     */
    public Integer lineNumber { get; set; }

    /**
     * Index of the word in the line
     * @return wordNumber
     */
    public Integer wordNumber { get; set; }

    /**
     * X location of the left edge of the word in pixels
     * @return xleft
     */
    public Integer xleft { get; set; }

    /**
     * Y location of the top edge of the word in pixels
     * @return ytop
     */
    public Integer ytop { get; set; }

    /**
     * Width of the word in pixels
     * @return width
     */
    public Integer width { get; set; }

    /**
     * Height of the word in pixels
     * @return height
     */
    public Integer height { get; set; }

    /**
     * Confidence level of the machine learning result; possible values are 0.0 (lowest accuracy) - 1.0 (highest accuracy)
     * @return confidenceLevel
     */
    public Double confidenceLevel { get; set; }

    /**
     * Index of the containing block
     * @return blockNumber
     */
    public Integer blockNumber { get; set; }

    /**
     * Index of the containing paragraph
     * @return paragraphNumber
     */
    public Integer paragraphNumber { get; set; }

    /**
     * Index of the containing page
     * @return pageNumber
     */
    public Integer pageNumber { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'WordText' => 'wordText',
        'LineNumber' => 'lineNumber',
        'WordNumber' => 'wordNumber',
        'XLeft' => 'xleft',
        'YTop' => 'ytop',
        'Width' => 'width',
        'Height' => 'height',
        'ConfidenceLevel' => 'confidenceLevel',
        'BlockNumber' => 'blockNumber',
        'ParagraphNumber' => 'paragraphNumber',
        'PageNumber' => 'pageNumber'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagOcrWordElement getExample() {
        SwagOcrWordElement ocrWordElement = new SwagOcrWordElement();
        ocrWordElement.wordText = 'aeiou';
        ocrWordElement.lineNumber = 123;
        ocrWordElement.wordNumber = 123;
        ocrWordElement.xleft = 123;
        ocrWordElement.ytop = 123;
        ocrWordElement.width = 123;
        ocrWordElement.height = 123;
        ocrWordElement.confidenceLevel = 1.3579;
        ocrWordElement.blockNumber = 123;
        ocrWordElement.paragraphNumber = 123;
        ocrWordElement.pageNumber = 123;
        return ocrWordElement;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagOcrWordElement) {
            SwagOcrWordElement ocrWordElement = (SwagOcrWordElement) obj;
            return this.wordText == ocrWordElement.wordText
                && this.lineNumber == ocrWordElement.lineNumber
                && this.wordNumber == ocrWordElement.wordNumber
                && this.xleft == ocrWordElement.xleft
                && this.ytop == ocrWordElement.ytop
                && this.width == ocrWordElement.width
                && this.height == ocrWordElement.height
                && this.confidenceLevel == ocrWordElement.confidenceLevel
                && this.blockNumber == ocrWordElement.blockNumber
                && this.paragraphNumber == ocrWordElement.paragraphNumber
                && this.pageNumber == ocrWordElement.pageNumber;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (wordText == null ? 0 : System.hashCode(wordText));
        hashCode = (17 * hashCode) + (lineNumber == null ? 0 : System.hashCode(lineNumber));
        hashCode = (17 * hashCode) + (wordNumber == null ? 0 : System.hashCode(wordNumber));
        hashCode = (17 * hashCode) + (xleft == null ? 0 : System.hashCode(xleft));
        hashCode = (17 * hashCode) + (ytop == null ? 0 : System.hashCode(ytop));
        hashCode = (17 * hashCode) + (width == null ? 0 : System.hashCode(width));
        hashCode = (17 * hashCode) + (height == null ? 0 : System.hashCode(height));
        hashCode = (17 * hashCode) + (confidenceLevel == null ? 0 : System.hashCode(confidenceLevel));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (paragraphNumber == null ? 0 : System.hashCode(paragraphNumber));
        hashCode = (17 * hashCode) + (pageNumber == null ? 0 : System.hashCode(pageNumber));
        return hashCode;
    }
}

