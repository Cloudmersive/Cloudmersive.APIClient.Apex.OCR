/*
 * ocrapi
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * A single text in an OCR document
 */
public class SwagOcrPhotoTextElement implements Swagger.MappedProperties {
    /**
     * Text of the word
     * @return text
     */
    public String text { get; set; }

    /**
     * X location of the left edge of the word in pixels
     * @return xleft
     */
    public Integer xleft { get; set; }

    /**
     * Y location of the top edge of the word in pixels
     * @return ytop
     */
    public Integer ytop { get; set; }

    /**
     * Width of the word in pixels
     * @return width
     */
    public Integer width { get; set; }

    /**
     * Height of the word in pixels
     * @return height
     */
    public Integer height { get; set; }

    /**
     * Points that form the bounding polygon around the text
     * @return boundingPoints
     */
    public List<SwagPoint> boundingPoints { get; set; }

    /**
     * Confidence level of the machine learning result; possible values are 0.0 (lowest accuracy) - 1.0 (highest accuracy)
     * @return confidenceLevel
     */
    public Double confidenceLevel { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Text' => 'text',
        'XLeft' => 'xleft',
        'YTop' => 'ytop',
        'Width' => 'width',
        'Height' => 'height',
        'BoundingPoints' => 'boundingPoints',
        'ConfidenceLevel' => 'confidenceLevel'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public SwagOcrPhotoTextElement() {
        boundingPoints = new List<SwagPoint>();
    }

    public static SwagOcrPhotoTextElement getExample() {
        SwagOcrPhotoTextElement ocrPhotoTextElement = new SwagOcrPhotoTextElement();
        ocrPhotoTextElement.text = 'aeiou';
        ocrPhotoTextElement.xleft = 123;
        ocrPhotoTextElement.ytop = 123;
        ocrPhotoTextElement.width = 123;
        ocrPhotoTextElement.height = 123;
        ocrPhotoTextElement.boundingPoints = new List<SwagPoint>{SwagPoint.getExample()};
        ocrPhotoTextElement.confidenceLevel = 1.3579;
        return ocrPhotoTextElement;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagOcrPhotoTextElement) {
            SwagOcrPhotoTextElement ocrPhotoTextElement = (SwagOcrPhotoTextElement) obj;
            return this.text == ocrPhotoTextElement.text
                && this.xleft == ocrPhotoTextElement.xleft
                && this.ytop == ocrPhotoTextElement.ytop
                && this.width == ocrPhotoTextElement.width
                && this.height == ocrPhotoTextElement.height
                && this.boundingPoints == ocrPhotoTextElement.boundingPoints
                && this.confidenceLevel == ocrPhotoTextElement.confidenceLevel;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (text == null ? 0 : System.hashCode(text));
        hashCode = (17 * hashCode) + (xleft == null ? 0 : System.hashCode(xleft));
        hashCode = (17 * hashCode) + (ytop == null ? 0 : System.hashCode(ytop));
        hashCode = (17 * hashCode) + (width == null ? 0 : System.hashCode(width));
        hashCode = (17 * hashCode) + (height == null ? 0 : System.hashCode(height));
        hashCode = (17 * hashCode) + (boundingPoints == null ? 0 : System.hashCode(boundingPoints));
        hashCode = (17 * hashCode) + (confidenceLevel == null ? 0 : System.hashCode(confidenceLevel));
        return hashCode;
    }
}

