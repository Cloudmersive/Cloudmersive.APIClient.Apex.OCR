/*
 * ocrapi
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Result of recognizing a receipt, to extract the key information from the receipt
 */
public class SwagReceiptRecognitionResult implements Swagger.MappedProperties {
    /**
     * True if the operation was successful, false otherwise
     * @return successful
     */
    public Boolean successful { get; set; }

    /**
     * The date and time printed on the receipt (if included on the receipt)
     * @return timestamp
     */
    public Datetime timestamp { get; set; }

    /**
     * The name of the business printed on the receipt (if included on the receipt)
     * @return businessName
     */
    public String businessName { get; set; }

    /**
     * The website URL of the business printed on the receipt (if included on the receipt)
     * @return businessWebsite
     */
    public String businessWebsite { get; set; }

    /**
     * The address of the business printed on the receipt (if included on the receipt)
     * @return addressString
     */
    public String addressString { get; set; }

    /**
     * The phone number printed on the receipt (if included on the receipt)
     * @return phoneNumber
     */
    public String phoneNumber { get; set; }

    /**
     * The individual line items comprising the order; does not include total (see ReceiptTotal)
     * @return receiptItems
     */
    public List<SwagReceiptLineItem> receiptItems { get; set; }

    /**
     * Optional; if available, the monetary value of the receipt subtotal - typically not including specialized line items such as Tax. If this value is not available, it will be 0.
     * @return receiptSubTotal
     */
    public Double receiptSubTotal { get; set; }

    /**
     * The total monetary value of the receipt (if included on the receipt)
     * @return receiptTotal
     */
    public Double receiptTotal { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Successful' => 'successful',
        'Timestamp' => 'timestamp',
        'BusinessName' => 'businessName',
        'BusinessWebsite' => 'businessWebsite',
        'AddressString' => 'addressString',
        'PhoneNumber' => 'phoneNumber',
        'ReceiptItems' => 'receiptItems',
        'ReceiptSubTotal' => 'receiptSubTotal',
        'ReceiptTotal' => 'receiptTotal'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public SwagReceiptRecognitionResult() {
        receiptItems = new List<SwagReceiptLineItem>();
    }

    public static SwagReceiptRecognitionResult getExample() {
        SwagReceiptRecognitionResult receiptRecognitionResult = new SwagReceiptRecognitionResult();
        receiptRecognitionResult.successful = true;
        receiptRecognitionResult.timestamp = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
        receiptRecognitionResult.businessName = 'aeiou';
        receiptRecognitionResult.businessWebsite = 'aeiou';
        receiptRecognitionResult.addressString = 'aeiou';
        receiptRecognitionResult.phoneNumber = 'aeiou';
        receiptRecognitionResult.receiptItems = new List<SwagReceiptLineItem>{SwagReceiptLineItem.getExample()};
        receiptRecognitionResult.receiptSubTotal = 1.3579;
        receiptRecognitionResult.receiptTotal = 1.3579;
        return receiptRecognitionResult;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagReceiptRecognitionResult) {
            SwagReceiptRecognitionResult receiptRecognitionResult = (SwagReceiptRecognitionResult) obj;
            return this.successful == receiptRecognitionResult.successful
                && this.timestamp == receiptRecognitionResult.timestamp
                && this.businessName == receiptRecognitionResult.businessName
                && this.businessWebsite == receiptRecognitionResult.businessWebsite
                && this.addressString == receiptRecognitionResult.addressString
                && this.phoneNumber == receiptRecognitionResult.phoneNumber
                && this.receiptItems == receiptRecognitionResult.receiptItems
                && this.receiptSubTotal == receiptRecognitionResult.receiptSubTotal
                && this.receiptTotal == receiptRecognitionResult.receiptTotal;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (successful == null ? 0 : System.hashCode(successful));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        hashCode = (17 * hashCode) + (businessName == null ? 0 : System.hashCode(businessName));
        hashCode = (17 * hashCode) + (businessWebsite == null ? 0 : System.hashCode(businessWebsite));
        hashCode = (17 * hashCode) + (addressString == null ? 0 : System.hashCode(addressString));
        hashCode = (17 * hashCode) + (phoneNumber == null ? 0 : System.hashCode(phoneNumber));
        hashCode = (17 * hashCode) + (receiptItems == null ? 0 : System.hashCode(receiptItems));
        hashCode = (17 * hashCode) + (receiptSubTotal == null ? 0 : System.hashCode(receiptSubTotal));
        hashCode = (17 * hashCode) + (receiptTotal == null ? 0 : System.hashCode(receiptTotal));
        return hashCode;
    }
}

