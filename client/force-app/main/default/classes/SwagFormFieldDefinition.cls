/*
 * ocrapi
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Definition of a form field for OCR data extraction from images
 */
public class SwagFormFieldDefinition implements Swagger.MappedProperties {
    /**
     * The identifier of the field; use this to identify which field is being referenced.  Set to SkipField if you do not wish to return the value of this field in the result.
     * @return fieldID
     */
    public String fieldID { get; set; }

    /**
     * Optional - the left-hand anchor of the field
     * @return leftAnchor
     */
    public String leftAnchor { get; set; }

    /**
     * Optional - the top anchor of the field
     * @return topAnchor
     */
    public String topAnchor { get; set; }

    /**
     * Optional - the bottom anchor of the field
     * @return bottomAnchor
     */
    public String bottomAnchor { get; set; }

    /**
     * Optional - alterate match text for the specified anchor
     * @return alternateAnchor
     */
    public String alternateAnchor { get; set; }

    /**
     * Optional - the matching mode for the anchor.  Possible values are Complete (requires the entire anchor to match) and Partial (allows only part of the anchor to match) and Horizontal (anchor must be laid out horizontally).  Default is Partial.
     * @return anchorMode
     */
    public String anchorMode { get; set; }

    /**
     * The data type of the field; possible values are INTEGER (Integer value), STRING (Arbitrary string value, spaces are permitted), DATE (Date in a structured format), DECIMAL (Decimal number), ALPHANUMERIC (Continuous alphanumeric string with no spaces), STRINGNOWHITESPACE (A string that contains no whitespace characters), SERIALNUMBER (A serial-number style string that contains letters and numbers, and certain symbols; must contain at least one number), ALPHAONLY (Alphabet characters only, no numbers or symbols or whitespace)
     * @return dataType
     */
    public String dataType { get; set; }

    /**
     * Optional - the target number of digits in the field; useful for fixed-length fields
     * @return targetDigitCount
     */
    public Integer targetDigitCount { get; set; }

    /**
     * Optional - the target number of digits in the field; useful for fixed-length fields
     * @return minimumCharacterCount
     */
    public Integer minimumCharacterCount { get; set; }

    /**
     * Optional - set to false to block values that contain numeric digits, set to true to allow numeric digits
     * @return allowNumericDigits
     */
    public Boolean allowNumericDigits { get; set; }

    /**
     * Vertical alignment of target value area relative to the field anchor; Possible values are VCenter, Top, Bottom
     * @return verticalAlignmentType
     */
    public String verticalAlignmentType { get; set; }

    /**
     * Horizontal alignment of target value area relative to the field anchor; Possible values are Left, Right
     * @return horizontalAlignmentType
     */
    public String horizontalAlignmentType { get; set; }

    /**
     * Optional - scale factor for target field width - relative to width of field title; a value of 1.0 indicates the target value area has the same width as the field value as occurring in the image; a value of 2.0 would indicate that the target value area has 2 times the width of the field value as occurring in the image.
     * @return targetFieldWidthRelative
     */
    public Double targetFieldWidthRelative { get; set; }

    /**
     * Optional - scale factor for target field height - relative to height of field title
     * @return targetFieldHeightRelative
     */
    public Double targetFieldHeightRelative { get; set; }

    /**
     * Optional - horizontal adjestment in relative width of the field
     * @return targetFieldHorizontalAdjustment
     */
    public Double targetFieldHorizontalAdjustment { get; set; }

    /**
     * Optional - vertical adjestment in relative height of the field
     * @return targetFieldVerticalAdjustment
     */
    public Double targetFieldVerticalAdjustment { get; set; }

    /**
     * Optional - Ignore any result items that contain a partial or complete match with these text strings
     * @return ignore
     */
    public List<String> ignore { get; set; }

    /**
     * Optional - additional options that can be set for this field definition, separated by commas.  Possible values are AllowMultiMatch (allow the same anchor to be matched to multiple fields)
     * @return options
     */
    public String options { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'FieldID' => 'fieldID',
        'LeftAnchor' => 'leftAnchor',
        'TopAnchor' => 'topAnchor',
        'BottomAnchor' => 'bottomAnchor',
        'AlternateAnchor' => 'alternateAnchor',
        'AnchorMode' => 'anchorMode',
        'DataType' => 'dataType',
        'TargetDigitCount' => 'targetDigitCount',
        'MinimumCharacterCount' => 'minimumCharacterCount',
        'AllowNumericDigits' => 'allowNumericDigits',
        'VerticalAlignmentType' => 'verticalAlignmentType',
        'HorizontalAlignmentType' => 'horizontalAlignmentType',
        'TargetFieldWidth_Relative' => 'targetFieldWidthRelative',
        'TargetFieldHeight_Relative' => 'targetFieldHeightRelative',
        'TargetFieldHorizontalAdjustment' => 'targetFieldHorizontalAdjustment',
        'TargetFieldVerticalAdjustment' => 'targetFieldVerticalAdjustment',
        'Ignore' => 'ignore',
        'Options' => 'options'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public SwagFormFieldDefinition() {
        ignore = new List<String>();
    }

    public static SwagFormFieldDefinition getExample() {
        SwagFormFieldDefinition formFieldDefinition = new SwagFormFieldDefinition();
        formFieldDefinition.fieldID = 'aeiou';
        formFieldDefinition.leftAnchor = 'aeiou';
        formFieldDefinition.topAnchor = 'aeiou';
        formFieldDefinition.bottomAnchor = 'aeiou';
        formFieldDefinition.alternateAnchor = 'aeiou';
        formFieldDefinition.anchorMode = 'aeiou';
        formFieldDefinition.dataType = 'aeiou';
        formFieldDefinition.targetDigitCount = 123;
        formFieldDefinition.minimumCharacterCount = 123;
        formFieldDefinition.allowNumericDigits = true;
        formFieldDefinition.verticalAlignmentType = 'aeiou';
        formFieldDefinition.horizontalAlignmentType = 'aeiou';
        formFieldDefinition.targetFieldWidthRelative = 1.3579;
        formFieldDefinition.targetFieldHeightRelative = 1.3579;
        formFieldDefinition.targetFieldHorizontalAdjustment = 1.3579;
        formFieldDefinition.targetFieldVerticalAdjustment = 1.3579;
        formFieldDefinition.ignore = new List<String>{'aeiou'};
        formFieldDefinition.options = 'aeiou';
        return formFieldDefinition;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagFormFieldDefinition) {
            SwagFormFieldDefinition formFieldDefinition = (SwagFormFieldDefinition) obj;
            return this.fieldID == formFieldDefinition.fieldID
                && this.leftAnchor == formFieldDefinition.leftAnchor
                && this.topAnchor == formFieldDefinition.topAnchor
                && this.bottomAnchor == formFieldDefinition.bottomAnchor
                && this.alternateAnchor == formFieldDefinition.alternateAnchor
                && this.anchorMode == formFieldDefinition.anchorMode
                && this.dataType == formFieldDefinition.dataType
                && this.targetDigitCount == formFieldDefinition.targetDigitCount
                && this.minimumCharacterCount == formFieldDefinition.minimumCharacterCount
                && this.allowNumericDigits == formFieldDefinition.allowNumericDigits
                && this.verticalAlignmentType == formFieldDefinition.verticalAlignmentType
                && this.horizontalAlignmentType == formFieldDefinition.horizontalAlignmentType
                && this.targetFieldWidthRelative == formFieldDefinition.targetFieldWidthRelative
                && this.targetFieldHeightRelative == formFieldDefinition.targetFieldHeightRelative
                && this.targetFieldHorizontalAdjustment == formFieldDefinition.targetFieldHorizontalAdjustment
                && this.targetFieldVerticalAdjustment == formFieldDefinition.targetFieldVerticalAdjustment
                && this.ignore == formFieldDefinition.ignore
                && this.options == formFieldDefinition.options;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (fieldID == null ? 0 : System.hashCode(fieldID));
        hashCode = (17 * hashCode) + (leftAnchor == null ? 0 : System.hashCode(leftAnchor));
        hashCode = (17 * hashCode) + (topAnchor == null ? 0 : System.hashCode(topAnchor));
        hashCode = (17 * hashCode) + (bottomAnchor == null ? 0 : System.hashCode(bottomAnchor));
        hashCode = (17 * hashCode) + (alternateAnchor == null ? 0 : System.hashCode(alternateAnchor));
        hashCode = (17 * hashCode) + (anchorMode == null ? 0 : System.hashCode(anchorMode));
        hashCode = (17 * hashCode) + (dataType == null ? 0 : System.hashCode(dataType));
        hashCode = (17 * hashCode) + (targetDigitCount == null ? 0 : System.hashCode(targetDigitCount));
        hashCode = (17 * hashCode) + (minimumCharacterCount == null ? 0 : System.hashCode(minimumCharacterCount));
        hashCode = (17 * hashCode) + (allowNumericDigits == null ? 0 : System.hashCode(allowNumericDigits));
        hashCode = (17 * hashCode) + (verticalAlignmentType == null ? 0 : System.hashCode(verticalAlignmentType));
        hashCode = (17 * hashCode) + (horizontalAlignmentType == null ? 0 : System.hashCode(horizontalAlignmentType));
        hashCode = (17 * hashCode) + (targetFieldWidthRelative == null ? 0 : System.hashCode(targetFieldWidthRelative));
        hashCode = (17 * hashCode) + (targetFieldHeightRelative == null ? 0 : System.hashCode(targetFieldHeightRelative));
        hashCode = (17 * hashCode) + (targetFieldHorizontalAdjustment == null ? 0 : System.hashCode(targetFieldHorizontalAdjustment));
        hashCode = (17 * hashCode) + (targetFieldVerticalAdjustment == null ? 0 : System.hashCode(targetFieldVerticalAdjustment));
        hashCode = (17 * hashCode) + (ignore == null ? 0 : System.hashCode(ignore));
        hashCode = (17 * hashCode) + (options == null ? 0 : System.hashCode(options));
        return hashCode;
    }
}

