/*
 * ocrapi
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * The result of extracting form field values
 */
public class SwagFormRecognitionResult implements Swagger.MappedProperties {
    /**
     * True if the operation was successful, false otherwise
     * @return successful
     */
    public Boolean successful { get; set; }

    /**
     * Result of form field OCR data extraction
     * @return fieldValueExtractionResult
     */
    public List<SwagFieldResult> fieldValueExtractionResult { get; set; }

    /**
     * Result of form table OCR data extraction
     * @return tableValueExtractionResults
     */
    public List<SwagTableResult> tableValueExtractionResults { get; set; }

    /**
     * Diagnostic images - default is null, enable diagnostics=true to populate this parameter with one image per field
     * @return diagnostics
     */
    public List<String> diagnostics { get; set; }

    /**
     * Optional; populated when using photo/recognize/form/advanced with the Setting Name of the best-matching highest-relevance form
     * @return bestMatchFormSettingName
     */
    public String bestMatchFormSettingName { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Successful' => 'successful',
        'FieldValueExtractionResult' => 'fieldValueExtractionResult',
        'TableValueExtractionResults' => 'tableValueExtractionResults',
        'Diagnostics' => 'diagnostics',
        'BestMatchFormSettingName' => 'bestMatchFormSettingName'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public SwagFormRecognitionResult() {
        fieldValueExtractionResult = new List<SwagFieldResult>();
        tableValueExtractionResults = new List<SwagTableResult>();
        diagnostics = new List<String>();
    }

    public static SwagFormRecognitionResult getExample() {
        SwagFormRecognitionResult formRecognitionResult = new SwagFormRecognitionResult();
        formRecognitionResult.successful = true;
        formRecognitionResult.fieldValueExtractionResult = new List<SwagFieldResult>{SwagFieldResult.getExample()};
        formRecognitionResult.tableValueExtractionResults = new List<SwagTableResult>{SwagTableResult.getExample()};
        formRecognitionResult.diagnostics = new List<String>{'aeiou'};
        formRecognitionResult.bestMatchFormSettingName = 'aeiou';
        return formRecognitionResult;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagFormRecognitionResult) {
            SwagFormRecognitionResult formRecognitionResult = (SwagFormRecognitionResult) obj;
            return this.successful == formRecognitionResult.successful
                && this.fieldValueExtractionResult == formRecognitionResult.fieldValueExtractionResult
                && this.tableValueExtractionResults == formRecognitionResult.tableValueExtractionResults
                && this.diagnostics == formRecognitionResult.diagnostics
                && this.bestMatchFormSettingName == formRecognitionResult.bestMatchFormSettingName;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (successful == null ? 0 : System.hashCode(successful));
        hashCode = (17 * hashCode) + (fieldValueExtractionResult == null ? 0 : System.hashCode(fieldValueExtractionResult));
        hashCode = (17 * hashCode) + (tableValueExtractionResults == null ? 0 : System.hashCode(tableValueExtractionResults));
        hashCode = (17 * hashCode) + (diagnostics == null ? 0 : System.hashCode(diagnostics));
        hashCode = (17 * hashCode) + (bestMatchFormSettingName == null ? 0 : System.hashCode(bestMatchFormSettingName));
        return hashCode;
    }
}

