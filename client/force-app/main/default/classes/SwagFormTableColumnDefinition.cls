/*
 * ocrapi
 * The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Definition of a column within a table for OCR data extraction from images
 */
public class SwagFormTableColumnDefinition implements Swagger.MappedProperties {
    /**
     * The identifier of the field; use this to identify which field is being referenced
     * @return columnID
     */
    public String columnID { get; set; }

    /**
     * Optional - the top anchor of the column heading
     * @return topAnchor
     */
    public String topAnchor { get; set; }

    /**
     * Optional - the matching mode for the anchor.  Possible values are Complete (requires the entire anchor to match) and Partial (allows only part of the anchor to match).  Default is Partial.
     * @return anchorMode
     */
    public String anchorMode { get; set; }

    /**
     * The data type of the field; possible values are INTEGER (Integer value), STRING (Arbitrary string value, spaces are permitted), DATE (Date in a structured format), DECIMAL (Decimal number), ALPHANUMERIC (Continuous alphanumeric string with no spaces), STRINGNOWHITESPACE (A string that contains no whitespace characters), SERIALNUMBER (A serial-number style string that contains letters and numbers, and certain symbols; must contain at least one number), ALPHAONLY (Alphabet characters only, no numbers or symbols or whitespace)
     * @return dataType
     */
    public String dataType { get; set; }

    /**
     * Optional - the target number of digits in the field; useful for fixed-length fields
     * @return minimumCharacterCount
     */
    public Integer minimumCharacterCount { get; set; }

    /**
     * Optional - set to false to block values that contain numeric digits, set to true to allow numeric digits
     * @return allowNumericDigits
     */
    public Boolean allowNumericDigits { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'ColumnID' => 'columnID',
        'TopAnchor' => 'topAnchor',
        'AnchorMode' => 'anchorMode',
        'DataType' => 'dataType',
        'MinimumCharacterCount' => 'minimumCharacterCount',
        'AllowNumericDigits' => 'allowNumericDigits'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagFormTableColumnDefinition getExample() {
        SwagFormTableColumnDefinition formTableColumnDefinition = new SwagFormTableColumnDefinition();
        formTableColumnDefinition.columnID = 'aeiou';
        formTableColumnDefinition.topAnchor = 'aeiou';
        formTableColumnDefinition.anchorMode = 'aeiou';
        formTableColumnDefinition.dataType = 'aeiou';
        formTableColumnDefinition.minimumCharacterCount = 123;
        formTableColumnDefinition.allowNumericDigits = true;
        return formTableColumnDefinition;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagFormTableColumnDefinition) {
            SwagFormTableColumnDefinition formTableColumnDefinition = (SwagFormTableColumnDefinition) obj;
            return this.columnID == formTableColumnDefinition.columnID
                && this.topAnchor == formTableColumnDefinition.topAnchor
                && this.anchorMode == formTableColumnDefinition.anchorMode
                && this.dataType == formTableColumnDefinition.dataType
                && this.minimumCharacterCount == formTableColumnDefinition.minimumCharacterCount
                && this.allowNumericDigits == formTableColumnDefinition.allowNumericDigits;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (columnID == null ? 0 : System.hashCode(columnID));
        hashCode = (17 * hashCode) + (topAnchor == null ? 0 : System.hashCode(topAnchor));
        hashCode = (17 * hashCode) + (anchorMode == null ? 0 : System.hashCode(anchorMode));
        hashCode = (17 * hashCode) + (dataType == null ? 0 : System.hashCode(dataType));
        hashCode = (17 * hashCode) + (minimumCharacterCount == null ? 0 : System.hashCode(minimumCharacterCount));
        hashCode = (17 * hashCode) + (allowNumericDigits == null ? 0 : System.hashCode(allowNumericDigits));
        return hashCode;
    }
}

